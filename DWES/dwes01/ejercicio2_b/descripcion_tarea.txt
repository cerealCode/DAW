Diseñar CSVs (HECHO)
index.html con formularios de filtrado (Falta mandar por $POST, generar tabla datos filtrados)
a.php cargar archivos CSV por referencia (HECHO)
b.php filtrado de datos
datos.php validación y muestra de errores de entrada


POSSIBLE SOLUTION FILTER

function filtrarLibros($minCopias = null, $generos = []): array {
    $datos = [];
    
    // Aplicar filtros
    return array_filter($datos, function($libro) use ($minCopias, $generos) {
        $cumpleFiltros = true;
        
        // Filtrar por copias mínimas
        if ($minCopias !== null) {
            $copias = (int)str_replace(',', '', $libro['Copias Vendidas']);
            if ($copias < $minCopias) {
                $cumpleFiltros = false;
            }
        }
        
        // Filtrar por géneros
        if (!empty($generos)) {
            if (!in_array($libro['Género'], $generos)) {
                $cumpleFiltros = false;
            }
        }
        
        return $cumpleFiltros;
    });


EXAMPLE CREATION TABLE FILTERED HTML
 <div class="results">
                <h2>Resultados de la búsqueda:</h2>
                <table border="1" style="width: 100%; margin-top: 20px; border-collapse: collapse;">
                    <thead>
                        <tr>
                            <th>Título</th>
                            <th>Autor</th>
                            <th>Copias Vendidas</th>
                            <th>Género</th>
                        </tr>
                    </thead>
                    <tbody>
                        <?php foreach ($libros_filtrados as $libro): ?>
                        <tr>
                            <td><?php echo htmlspecialchars($libro['Título']); ?></td>
                            <td><?php echo htmlspecialchars($libro['Autor']); ?></td>
                            <td><?php echo htmlspecialchars($libro['Copias Vendidas']); ?></td>
                            <td><?php echo htmlspecialchars($libro['Género']); ?></td>
                        </tr>
                        <?php endforeach; ?>
                    </tbody>
                </table>
            </div>
            <?php
        } else {
            echo "<p>No se encontraron libros que coincidan con los criterios de búsqueda.</p>";
        }
    }
    ?>




// HTML Form with checkboxes & Filtering Example 
<?php
// Let's say we have a list of products in our database/array
$allProducts = [
['id' => 1, 'name' => 'Laptop', 'category' => 'electronics'],
['id' => 2, 'name' => 'Headphones', 'category' => 'electronics'],
['id' => 3, 'name' => 'T-shirt', 'category' => 'clothing'],
['id' => 4, 'name' => 'Jeans', 'category' => 'clothing'],
['id' => 5, 'name' => 'Book', 'category' => 'books']
];


?>
<form method="POST">
<input type="checkbox" name="categories[]" value="electronics"> Electronics<br>
<input type="checkbox" name="categories[]" value="clothing"> Clothing<br>
<input type="checkbox" name="categories[]" value="books"> Books<br>
<input type="submit" value="Filter">
</form>

<?php
// Processing the form submission
if ($_SERVER['REQUEST_METHOD'] === 'POST') {
// Get selected categories from checkboxes
$selectedCategories = $_POST['categories'] ?? [];



if (!empty($selectedCategories)) {
    // Filter products based on selected categories
    $filteredProducts = array_filter($allProducts, function($product) use ($selectedCategories) {
        return in_array($product['category'], $selectedCategories);
    });
    // Display filtered results
    foreach ($filteredProducts as $product) {
        echo $product['name'] . " (" . $product['category'] . ")<br>";
    }
} else {
    // If no categories selected, show all products
    foreach ($allProducts as $product) {
        echo $product['name'] . " (" . $product['category'] . ")<br>";
    }
}
}

// Alternative method using array_intersect_key
// Useful when working with simple arrays:
$simpleExample = [
'laptop' => 999,
'phone' => 699,
'tablet' => 499,
'watch' => 299
];

// If checkboxes were submitted with product names
$selectedItems = ['laptop', 'watch']; // This would come from $_POST['items']
$filteredPrices = array_intersect_key(
$simpleExample,
array_flip($selectedItems)
);